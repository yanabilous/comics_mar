{"version":3,"sources":["components/charList/someFunk.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["logger","console","log","secondLog","View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","props","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","charList","setCharList","getAllCharacters","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","obj","default","catch","disabled","Skeleton","comics","CharInfo","charId","skeleton","CharSearchForm","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","ErrorBoundary","state","errorInfo","this","setState","children","Component","MainPage","selectedChar","decoration","display","width","height","objectFit","margin","img","useHttp","request","_apiBase","_apiKey","res","data","_transformCharacter","slice","path","extension","urls","url","setLoading","setError","useCallback","method","body","headers","fetch","response","ok","Error","status","json","message"],"mappings":"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","file":"static/js/5.99d12e84.chunk.js","sourcesContent":["export default function logger() {\n    console.log(\"hello world\");\n}\n\nexport function secondLog() {\n    console.log(\"2022\");\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from \"react\";\nimport MarvelService from \"../../services/MarvelService\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\n\nconst RandomChar = (props) => {\n    const [char, setChar] = useState({});\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId);\n        };\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n        getCharacter(id)\n            .then(onCharLoaded)\n\n    };\n\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View char={char}/> : null;\n\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    );\n\n\n};\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {\"objectFit\": \"cover\"};\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n        imgStyle = {\"objectFit\": \"contain\"};\n    }\n\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RandomChar;","import \"./charList.scss\";\nimport {useState, useEffect, useRef} from \"react\";\nimport PropTypes from \"prop-types\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport {logger, secondLog} from \"./someFunk\";\n\n\nconst CharList = (props) => {\n    console.log(\"CharList\");\n    const [charList, setCharList] = useState([]);\n    const {loading, error, getAllCharacters} = useMarvelService();\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n\n    useEffect(() => {\n        console.log(\"useEffect\");\n        onRequest(offset, true);\n    }, []);\n\n\n    const onRequest = (offset, initial) => {\n        console.log(\"onRequest\");\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded);\n\n    };\n\n\n    const onCharListLoaded = (newCharList) => {\n\n        // const {logger, secondLog} = await import('./someFunk');\n        // logger();\n        // secondLog();\n\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    };\n\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove(\"char__item_selected\"));\n        itemRefs.current[id].classList.add(\"char__item_selected\");\n        itemRefs.current[id].focus();\n    };\n\n    // Этот метод создан для оптимизации,\n    // чтобы не помещать такую конструкцию в метод render\n\n    function renderItems(arr) {\n        console.log(arr.length);\n        const items = arr.map((item, i) => {\n            let imgStyle = {\"objectFit\": \"cover\"};\n            if (item.thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n                imgStyle = {\"objectFit\": \"unset\"};\n            }\n\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === \" \" || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                    <div className=\"char__name\">{item.name}</div>\n\n                </li>\n            );\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        );\n    }\n\n    const items = renderItems(charList);\n    // const items = <span>123</span>;\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    if (loading) {\n        import(\"./someFunk\")\n            .then(obj => obj.default())\n            .catch();\n    }\n    return (\n\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{\"display\": charEnded ? \"none\" : \"block\"}}\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );\n\n\n    // return (\n    //     <div className=\"char__list\">\n    //         <ul className=\"char__grid\">\n    //             <li className=\"char__item\">\n    //                 <img src={abyss} alt=\"abyss\"/>\n    //                 <div className=\"char__name\">Abyss</div>\n    //             </li>\n    //             <li className=\"char__item char__item_selected\">\n    //                 <img src={abyss} alt=\"abyss\"/>\n    //                 <div className=\"char__name\">Abyss</div>\n    //             </li>\n    //             <li className=\"char__item\">\n    //                 <img src={abyss} alt=\"abyss\"/>\n    //                 <div className=\"char__name\">Abyss</div>\n    //             </li>\n    //             <li className=\"char__item\">\n    //                 <img src={abyss} alt=\"abyss\"/>\n    //                 <div className=\"char__name\">Abyss</div>\n    //             </li>\n    //             <li className=\"char__item\">\n    //                 <img src={abyss} alt=\"abyss\"/>\n    //                 <div className=\"char__name\">Abyss</div>\n    //             </li>\n    //             <li className=\"char__item\">\n    //                 <img src={abyss} alt=\"abyss\"/>\n    //                 <div className=\"char__name\">Abyss</div>\n    //             </li>\n    //             <li className=\"char__item\">\n    //                 <img src={abyss} alt=\"abyss\"/>\n    //                 <div className=\"char__name\">Abyss</div>\n    //             </li>\n    //             <li className=\"char__item\">\n    //                 <img src={abyss} alt=\"abyss\"/>\n    //                 <div className=\"char__name\">Abyss</div>\n    //             </li>\n    //             <li className=\"char__item\">\n    //                 <img src={abyss} alt=\"abyss\"/>\n    //                 <div className=\"char__name\">Abyss</div>\n    //             </li>\n    //         </ul>\n    //         <button className=\"button button__main button__long\">\n    //             <div className=\"inner\">load more</div>\n    //         </button>\n    //     </div>\n    // )\n};\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n};\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import {useState, useEffect} from \"react\";\nimport PropTypes from \"prop-types\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Skeleton from \"../skeleton/Skeleton\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded);\n\n\n    };\n\n    const onCharLoaded = (char) => {\n\n        setChar(char);\n\n\n    };\n\n    const skeleton = (char || loading || error) ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n    return (<div>\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n\n        </div>\n\n        </div>\n    );\n\n};\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    let imgStyle = {\"objectFit\": \"cover\"};\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n        imgStyle = {\"objectFit\": \"contain\"};\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : \"There is no comics with this character\"}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        );\n                    })\n                }\n\n\n            </ul>\n\n        </>\n    );\n};\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n};\n\nexport default CharInfo;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> :\n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field\n                            id=\"charName\"\n                            name='charName'\n                            type='text'\n                            placeholder=\"Enter name\"/>\n                        <button\n                            type='submit'\n                            className=\"button button__main\"\n                            disabled={loading}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import {Component} from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    };\n\n    // static getDerivedStateFromError(error) {\n    //     return {error: true};\n    // }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo)\n        this.setState({\n            error: true\n        })\n    }\n    render() {\n        if(this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n\n    return (\n        <>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm/>\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\nconst ErrorMessage = () => {\n    return (\n        <img style={{display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"Error\"/>\n    );\n\n};\n\nexport default ErrorMessage;","import {useHttp} from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n    const _apiKey = \"apikey=26bf773b3288c2d35df092385ce05b83\";\n    const _baseOffset = 210;\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    };\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    };\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey} `);\n        return _transformCharacter(res.data.results[0]);\n    };\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : \"There is no description for this character\",\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        };\n\n    };\n\n    return {loading, error, getAllCharacters, getCharacter, getCharacterByName, clearError};\n};\n\nexport default useMarvelService;","import {useState, useCallback} from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = \"GET\", body = null, headers = {\"Content-Type\": \"aplication/json\"}) => {\n        setLoading(true);\n        try {\n            const response = await fetch(url, {method, body, headers});\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n            const data = await response.json();\n            setLoading(false);\n            return data;\n        } catch (e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, []);\n    const clearError = useCallback(() => setError(null), [])\n\n    return {loading, request, error, clearError}\n};"],"sourceRoot":""}